[Cassette: 'Plunk::Client/#send/when mail/when all params are set/sending is successful'] Initialized with options: {:record=>:once, :record_on_error=>true, :match_requests_on=>[:method, :uri, :body, #<Proc:0x00007fbf4a36e1e0 /home/adipurnm/Documents/Work/Freelance/lib/plunk-ruby/spec/spec_helper.rb:24 (lambda)>], :allow_unused_http_interactions=>false, :drop_unused_requests=>false, :serialize_with=>:yaml, :persist_with=>:file_system, :persister_options=>{}}
[webmock] Handling request: [post https://api.useplunk.com/v1/send "{\"from\":{\"email\":\"sender@example.com\",\"name\":\"Plunk Test\"},\"to\":[{\"email\":\"recip"] (disabled: false)
[VCR::Configuration] before_playback: replacing "<BEARER_TOKEN>" with "<BEARER_TOKEN>"
  [Cassette: 'Plunk::Client/#send/when mail/when all params are set/sending is successful'] Initialized HTTPInteractionList with request matchers [:method, :uri, :body, #<Proc:0x00007fbf4a36e1e0 /home/adipurnm/Documents/Work/Freelance/lib/plunk-ruby/spec/spec_helper.rb:24 (lambda)>] and 1 interaction(s): { [post https://api.useplunk.com/v1/send "{\"from\":{\"email\":\"sender@example.com\",\"name\":\"Plunk Test\"},\"to\":[{\"email\":\"recip"] => [200 "{\"success\":true,\"emails\":[{\"contact\":{\"id\":\"80d74d13-16eb-48c5-bc2b-aae6fd5865cc"] }
  [Cassette: 'Plunk::Client/#send/when mail/when all params are set/sending is successful'] Checking if [post https://api.useplunk.com/v1/send "{\"from\":{\"email\":\"sender@example.com\",\"name\":\"Plunk Test\"},\"to\":[{\"email\":\"recip"] matches [post https://api.useplunk.com/v1/send "{\"from\":{\"email\":\"sender@example.com\",\"name\":\"Plunk Test\"},\"to\":[{\"email\":\"recip"] using [:method, :uri, :body, #<Proc:0x00007fbf4a36e1e0 /home/adipurnm/Documents/Work/Freelance/lib/plunk-ruby/spec/spec_helper.rb:24 (lambda)>]
    [Cassette: 'Plunk::Client/#send/when mail/when all params are set/sending is successful'] method (matched): current request [post https://api.useplunk.com/v1/send "{\"from\":{\"email\":\"sender@example.com\",\"name\":\"Plunk Test\"},\"to\":[{\"email\":\"recip"] vs [post https://api.useplunk.com/v1/send "{\"from\":{\"email\":\"sender@example.com\",\"name\":\"Plunk Test\"},\"to\":[{\"email\":\"recip"]
    [Cassette: 'Plunk::Client/#send/when mail/when all params are set/sending is successful'] uri (matched): current request [post https://api.useplunk.com/v1/send "{\"from\":{\"email\":\"sender@example.com\",\"name\":\"Plunk Test\"},\"to\":[{\"email\":\"recip"] vs [post https://api.useplunk.com/v1/send "{\"from\":{\"email\":\"sender@example.com\",\"name\":\"Plunk Test\"},\"to\":[{\"email\":\"recip"]
    [Cassette: 'Plunk::Client/#send/when mail/when all params are set/sending is successful'] body (matched): current request [post https://api.useplunk.com/v1/send "{\"from\":{\"email\":\"sender@example.com\",\"name\":\"Plunk Test\"},\"to\":[{\"email\":\"recip"] vs [post https://api.useplunk.com/v1/send "{\"from\":{\"email\":\"sender@example.com\",\"name\":\"Plunk Test\"},\"to\":[{\"email\":\"recip"]
    [Cassette: 'Plunk::Client/#send/when mail/when all params are set/sending is successful'] #<Proc:0x00007fbf4a36e1e0 /home/adipurnm/Documents/Work/Freelance/lib/plunk-ruby/spec/spec_helper.rb:24 (lambda)> (matched): current request [post https://api.useplunk.com/v1/send "{\"from\":{\"email\":\"sender@example.com\",\"name\":\"Plunk Test\"},\"to\":[{\"email\":\"recip"] vs [post https://api.useplunk.com/v1/send "{\"from\":{\"email\":\"sender@example.com\",\"name\":\"Plunk Test\"},\"to\":[{\"email\":\"recip"]
  [Cassette: 'Plunk::Client/#send/when mail/when all params are set/sending is successful'] Found matching interaction for [post https://api.useplunk.com/v1/send "{\"from\":{\"email\":\"sender@example.com\",\"name\":\"Plunk Test\"},\"to\":[{\"email\":\"recip"] at index 0: [200 "{\"success\":true,\"emails\":[{\"contact\":{\"id\":\"80d74d13-16eb-48c5-bc2b-aae6fd5865cc"]
[webmock] Identified request type (stubbed_by_vcr) for [post https://api.useplunk.com/v1/send "{\"from\":{\"email\":\"sender@example.com\",\"name\":\"Plunk Test\"},\"to\":[{\"email\":\"recip"]
[Cassette: 'Plunk::Client/#send/when mail/when no subject and no text set/raises sending error with array of errors'] Initialized with options: {:record=>:once, :record_on_error=>true, :match_requests_on=>[:method, :uri, :body, #<Proc:0x00007fbf4a36e1e0 /home/adipurnm/Documents/Work/Freelance/lib/plunk-ruby/spec/spec_helper.rb:24 (lambda)>], :allow_unused_http_interactions=>false, :drop_unused_requests=>false, :serialize_with=>:yaml, :persist_with=>:file_system, :persister_options=>{}}
[webmock] Handling request: [post https://api.useplunk.com/v1/send "{\"from\":{\"email\":\"sender@example.com\",\"name\":\"Plunk Test\"},\"to\":[{\"email\":\"recip"] (disabled: false)
[VCR::Configuration] before_playback: replacing "<BEARER_TOKEN>" with "<BEARER_TOKEN>"
  [Cassette: 'Plunk::Client/#send/when mail/when no subject and no text set/raises sending error with array of errors'] Initialized HTTPInteractionList with request matchers [:method, :uri, :body, #<Proc:0x00007fbf4a36e1e0 /home/adipurnm/Documents/Work/Freelance/lib/plunk-ruby/spec/spec_helper.rb:24 (lambda)>] and 1 interaction(s): { [post https://api.useplunk.com/v1/send "{\"from\":{\"email\":\"sender@example.com\",\"name\":\"Plunk Test\"},\"to\":[{\"email\":\"recip"] => [400 "{\"errors\":[\"'subject' is required\",\"must specify either text or html body\"]}"] }
  [Cassette: 'Plunk::Client/#send/when mail/when no subject and no text set/raises sending error with array of errors'] Checking if [post https://api.useplunk.com/v1/send "{\"from\":{\"email\":\"sender@example.com\",\"name\":\"Plunk Test\"},\"to\":[{\"email\":\"recip"] matches [post https://api.useplunk.com/v1/send "{\"from\":{\"email\":\"sender@example.com\",\"name\":\"Plunk Test\"},\"to\":[{\"email\":\"recip"] using [:method, :uri, :body, #<Proc:0x00007fbf4a36e1e0 /home/adipurnm/Documents/Work/Freelance/lib/plunk-ruby/spec/spec_helper.rb:24 (lambda)>]
    [Cassette: 'Plunk::Client/#send/when mail/when no subject and no text set/raises sending error with array of errors'] method (matched): current request [post https://api.useplunk.com/v1/send "{\"from\":{\"email\":\"sender@example.com\",\"name\":\"Plunk Test\"},\"to\":[{\"email\":\"recip"] vs [post https://api.useplunk.com/v1/send "{\"from\":{\"email\":\"sender@example.com\",\"name\":\"Plunk Test\"},\"to\":[{\"email\":\"recip"]
    [Cassette: 'Plunk::Client/#send/when mail/when no subject and no text set/raises sending error with array of errors'] uri (matched): current request [post https://api.useplunk.com/v1/send "{\"from\":{\"email\":\"sender@example.com\",\"name\":\"Plunk Test\"},\"to\":[{\"email\":\"recip"] vs [post https://api.useplunk.com/v1/send "{\"from\":{\"email\":\"sender@example.com\",\"name\":\"Plunk Test\"},\"to\":[{\"email\":\"recip"]
    [Cassette: 'Plunk::Client/#send/when mail/when no subject and no text set/raises sending error with array of errors'] body (matched): current request [post https://api.useplunk.com/v1/send "{\"from\":{\"email\":\"sender@example.com\",\"name\":\"Plunk Test\"},\"to\":[{\"email\":\"recip"] vs [post https://api.useplunk.com/v1/send "{\"from\":{\"email\":\"sender@example.com\",\"name\":\"Plunk Test\"},\"to\":[{\"email\":\"recip"]
    [Cassette: 'Plunk::Client/#send/when mail/when no subject and no text set/raises sending error with array of errors'] #<Proc:0x00007fbf4a36e1e0 /home/adipurnm/Documents/Work/Freelance/lib/plunk-ruby/spec/spec_helper.rb:24 (lambda)> (matched): current request [post https://api.useplunk.com/v1/send "{\"from\":{\"email\":\"sender@example.com\",\"name\":\"Plunk Test\"},\"to\":[{\"email\":\"recip"] vs [post https://api.useplunk.com/v1/send "{\"from\":{\"email\":\"sender@example.com\",\"name\":\"Plunk Test\"},\"to\":[{\"email\":\"recip"]
  [Cassette: 'Plunk::Client/#send/when mail/when no subject and no text set/raises sending error with array of errors'] Found matching interaction for [post https://api.useplunk.com/v1/send "{\"from\":{\"email\":\"sender@example.com\",\"name\":\"Plunk Test\"},\"to\":[{\"email\":\"recip"] at index 0: [400 "{\"errors\":[\"'subject' is required\",\"must specify either text or html body\"]}"]
[webmock] Identified request type (stubbed_by_vcr) for [post https://api.useplunk.com/v1/send "{\"from\":{\"email\":\"sender@example.com\",\"name\":\"Plunk Test\"},\"to\":[{\"email\":\"recip"]
[Cassette: 'Plunk::Client/#send/when mail/when api key is incorrect/raises authorization error with array of errors'] Initialized with options: {:record=>:once, :record_on_error=>true, :match_requests_on=>[:method, :uri, :body, #<Proc:0x00007fbf4a36e1e0 /home/adipurnm/Documents/Work/Freelance/lib/plunk-ruby/spec/spec_helper.rb:24 (lambda)>], :allow_unused_http_interactions=>false, :drop_unused_requests=>false, :serialize_with=>:yaml, :persist_with=>:file_system, :persister_options=>{}}
[webmock] Handling request: [post https://api.useplunk.com/v1/send "{\"from\":{\"email\":\"sender@example.com\",\"name\":\"Plunk Test\"},\"to\":[{\"email\":\"recip"] (disabled: false)
[VCR::Configuration] before_playback: replacing "<BEARER_TOKEN>" with "<BEARER_TOKEN>"
  [Cassette: 'Plunk::Client/#send/when mail/when api key is incorrect/raises authorization error with array of errors'] Initialized HTTPInteractionList with request matchers [:method, :uri, :body, #<Proc:0x00007fbf4a36e1e0 /home/adipurnm/Documents/Work/Freelance/lib/plunk-ruby/spec/spec_helper.rb:24 (lambda)>] and 1 interaction(s): { [post https://api.useplunk.com/v1/send "{\"from\":{\"email\":\"sender@example.com\",\"name\":\"Plunk Test\"},\"to\":[{\"email\":\"recip"] => [401 "{\"errors\":[\"Unauthorized\"]}"] }
  [Cassette: 'Plunk::Client/#send/when mail/when api key is incorrect/raises authorization error with array of errors'] Checking if [post https://api.useplunk.com/v1/send "{\"from\":{\"email\":\"sender@example.com\",\"name\":\"Plunk Test\"},\"to\":[{\"email\":\"recip"] matches [post https://api.useplunk.com/v1/send "{\"from\":{\"email\":\"sender@example.com\",\"name\":\"Plunk Test\"},\"to\":[{\"email\":\"recip"] using [:method, :uri, :body, #<Proc:0x00007fbf4a36e1e0 /home/adipurnm/Documents/Work/Freelance/lib/plunk-ruby/spec/spec_helper.rb:24 (lambda)>]
    [Cassette: 'Plunk::Client/#send/when mail/when api key is incorrect/raises authorization error with array of errors'] method (matched): current request [post https://api.useplunk.com/v1/send "{\"from\":{\"email\":\"sender@example.com\",\"name\":\"Plunk Test\"},\"to\":[{\"email\":\"recip"] vs [post https://api.useplunk.com/v1/send "{\"from\":{\"email\":\"sender@example.com\",\"name\":\"Plunk Test\"},\"to\":[{\"email\":\"recip"]
    [Cassette: 'Plunk::Client/#send/when mail/when api key is incorrect/raises authorization error with array of errors'] uri (matched): current request [post https://api.useplunk.com/v1/send "{\"from\":{\"email\":\"sender@example.com\",\"name\":\"Plunk Test\"},\"to\":[{\"email\":\"recip"] vs [post https://api.useplunk.com/v1/send "{\"from\":{\"email\":\"sender@example.com\",\"name\":\"Plunk Test\"},\"to\":[{\"email\":\"recip"]
    [Cassette: 'Plunk::Client/#send/when mail/when api key is incorrect/raises authorization error with array of errors'] body (matched): current request [post https://api.useplunk.com/v1/send "{\"from\":{\"email\":\"sender@example.com\",\"name\":\"Plunk Test\"},\"to\":[{\"email\":\"recip"] vs [post https://api.useplunk.com/v1/send "{\"from\":{\"email\":\"sender@example.com\",\"name\":\"Plunk Test\"},\"to\":[{\"email\":\"recip"]
    [Cassette: 'Plunk::Client/#send/when mail/when api key is incorrect/raises authorization error with array of errors'] #<Proc:0x00007fbf4a36e1e0 /home/adipurnm/Documents/Work/Freelance/lib/plunk-ruby/spec/spec_helper.rb:24 (lambda)> (matched): current request [post https://api.useplunk.com/v1/send "{\"from\":{\"email\":\"sender@example.com\",\"name\":\"Plunk Test\"},\"to\":[{\"email\":\"recip"] vs [post https://api.useplunk.com/v1/send "{\"from\":{\"email\":\"sender@example.com\",\"name\":\"Plunk Test\"},\"to\":[{\"email\":\"recip"]
  [Cassette: 'Plunk::Client/#send/when mail/when api key is incorrect/raises authorization error with array of errors'] Found matching interaction for [post https://api.useplunk.com/v1/send "{\"from\":{\"email\":\"sender@example.com\",\"name\":\"Plunk Test\"},\"to\":[{\"email\":\"recip"] at index 0: [401 "{\"errors\":[\"Unauthorized\"]}"]
[webmock] Identified request type (stubbed_by_vcr) for [post https://api.useplunk.com/v1/send "{\"from\":{\"email\":\"sender@example.com\",\"name\":\"Plunk Test\"},\"to\":[{\"email\":\"recip"]
[Cassette: 'Plunk::Client/#send/when mail/when mail object is not a Plunk::Mail::Base/1:1:1:4:1'] Initialized with options: {:record=>:once, :record_on_error=>true, :match_requests_on=>[:method, :uri, :body, #<Proc:0x00007fbf4a36e1e0 /home/adipurnm/Documents/Work/Freelance/lib/plunk-ruby/spec/spec_helper.rb:24 (lambda)>], :allow_unused_http_interactions=>false, :drop_unused_requests=>false, :serialize_with=>:yaml, :persist_with=>:file_system, :persister_options=>{}}
  [Cassette: 'Plunk::Client/#send/when mail/when mail object is not a Plunk::Mail::Base/1:1:1:4:1'] Initialized HTTPInteractionList with request matchers [:method, :uri, :body, #<Proc:0x00007fbf4a36e1e0 /home/adipurnm/Documents/Work/Freelance/lib/plunk-ruby/spec/spec_helper.rb:24 (lambda)>] and 0 interaction(s): {  }
[webmock] Handling request: [post https://api.useplunk.com/v1/send "{\"from\":{\"email\":\"from@example.com\"},\"to\":[{\"email\":\"to@example.com\"}],\"cc\":[],\""] (disabled: false)
[webmock] Identified request type (externally_stubbed) for [post https://api.useplunk.com/v1/send "{\"from\":{\"email\":\"from@example.com\"},\"to\":[{\"email\":\"to@example.com\"}],\"cc\":[],\""]
[webmock] Handling request: [post https://api.useplunk.com/v1/send "{\"from\":{\"email\":\"from@example.com\"},\"to\":[{\"email\":\"to@example.com\"}],\"cc\":[],\""] (disabled: false)
[webmock] Identified request type (externally_stubbed) for [post https://api.useplunk.com/v1/send "{\"from\":{\"email\":\"from@example.com\"},\"to\":[{\"email\":\"to@example.com\"}],\"cc\":[],\""]
[webmock] Handling request: [post https://api.useplunk.com/v1/send "{\"from\":{\"email\":\"from@example.com\"},\"to\":[{\"email\":\"to@example.com\"}],\"cc\":[],\""] (disabled: false)
[webmock] Identified request type (externally_stubbed) for [post https://api.useplunk.com/v1/send "{\"from\":{\"email\":\"from@example.com\"},\"to\":[{\"email\":\"to@example.com\"}],\"cc\":[],\""]
[webmock] Handling request: [post https://api.useplunk.com/v1/send "{\"from\":{\"email\":\"from@example.com\"},\"to\":[{\"email\":\"to@example.com\"}],\"cc\":[],\""] (disabled: false)
[webmock] Identified request type (externally_stubbed) for [post https://api.useplunk.com/v1/send "{\"from\":{\"email\":\"from@example.com\"},\"to\":[{\"email\":\"to@example.com\"}],\"cc\":[],\""]
[webmock] Handling request: [post https://api.useplunk.com/v1/send "{\"from\":{\"email\":\"from@example.com\"},\"to\":[{\"email\":\"to@example.com\"}],\"cc\":[],\""] (disabled: false)
[webmock] Identified request type (externally_stubbed) for [post https://api.useplunk.com/v1/send "{\"from\":{\"email\":\"from@example.com\"},\"to\":[{\"email\":\"to@example.com\"}],\"cc\":[],\""]
[webmock] Handling request: [post https://api.useplunk.com/v1/send "{\"from\":{\"email\":\"from@example.com\"},\"to\":[{\"email\":\"to@example.com\"}],\"cc\":[],\""] (disabled: false)
[webmock] Identified request type (externally_stubbed) for [post https://api.useplunk.com/v1/send "{\"from\":{\"email\":\"from@example.com\"},\"to\":[{\"email\":\"to@example.com\"}],\"cc\":[],\""]
[webmock] Handling request: [post https://api.useplunk.com/v1/send "{\"from\":{\"email\":\"from@example.com\"},\"to\":[{\"email\":\"to@example.com\"}],\"cc\":[],\""] (disabled: false)
[webmock] Identified request type (externally_stubbed) for [post https://api.useplunk.com/v1/send "{\"from\":{\"email\":\"from@example.com\"},\"to\":[{\"email\":\"to@example.com\"}],\"cc\":[],\""]
[webmock] Handling request: [post https://api.useplunk.com/v1/send "{\"from\":{\"email\":\"from@example.com\"},\"to\":[{\"email\":\"to@example.com\"}],\"cc\":[],\""] (disabled: false)
[webmock] Identified request type (externally_stubbed) for [post https://api.useplunk.com/v1/send "{\"from\":{\"email\":\"from@example.com\"},\"to\":[{\"email\":\"to@example.com\"}],\"cc\":[],\""]
